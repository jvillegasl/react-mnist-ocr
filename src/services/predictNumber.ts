import { dataURLtoFile, maxFromArray } from "@/utils";
import { InferenceSession, Tensor, TypedTensor } from "onnxruntime-web";

export async function predictNumber(image: string) {
    const image_file = dataURLtoFile(image, "image.png");
    let body = new FormData();
    body.append("image", image_file);
    const prediction = await fetch("http://127.0.0.1:8000/api/ml/mnist/", {
        method: "POST",
        headers: {
            Accept: "application/json",
        },
        body,
    })
        .then((data) => data.json())
        .then((response) => response.data.prediction);

    return prediction;
}

export async function runModel(input: TypedTensor<"float32">) {
    const session = await InferenceSession.create("/mnist02.onnx", {
        executionProviders: ["webgl"],
        graphOptimizationLevel: "all",
    });

    // const data = Float32Array.from([
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0157, 0.2392,
    //     0.2392, 0.1608, 0.1294, 0.0824, 0.0118, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0941,
    //     0.4157, 0.2039, 0.2824, 0.3137, 0.3686, 0.4039, 0.2784, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.102, 0.302, 0.0039, 0.0039, 0.0039, 0.0039, 0.0157, 0.0667, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.102, 0.3137, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.102, 0.3137, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.1373, 0.2824, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.1686, 0.251, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.2549, 0.1647, 0.0039, 0.0235,
    //     0.0196, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.2627, 0.4275, 0.3647,
    //     0.3686, 0.3922, 0.4039, 0.3137, 0.0471, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0196, 0.0627,
    //     0.0275, 0.0039, 0.0039, 0.0549, 0.2745, 0.502, 0.0549, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.2588, 0.2824, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.1333, 0.2863,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.3216,
    //     0.1922, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.2196,
    //     0.3608, 0.0078, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0353, 0.3569, 0.2824, 0.1059, 0.1176, 0.2235, 0.3569,
    //     0.3373, 0.0235, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0588, 0.2118, 0.3294, 0.3216, 0.2353,
    //     0.1255, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039,
    //     0.0039,
    // ]);

    // const tensor = new Tensor("float32", data, [1, 1, 28, 28]);

    // await runInference(session, tensor);
    const prediction = await runInference(session, input);
    
    return prediction;
}

async function runInference(
    session: InferenceSession,
    input: TypedTensor<"float32">
) {
    const feeds: Record<string, Tensor> = {};
    feeds[session.inputNames[0]] = input;

    const outputData = await session.run(feeds);
    const output = outputData[session.outputNames[0]] as TypedTensor<"float32">;
    const results = maxFromArray(Array.from(output.data));

    return results;
}
